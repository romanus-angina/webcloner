import re
from typing import List, Dict, Any
from bs4 import BeautifulSoup

from ..utils.logger import get_logger

logger = get_logger(__name__)

class HTMLRewriterService:
    """
    Service to rewrite asset paths in generated HTML content to point to
    locally downloaded assets.
    """

    def rewrite_asset_paths(self, html_content: str, asset_map: Dict[str, str]) -> str:
        """
        Parses HTML and replaces original asset URLs with their new local paths.

        Args:
            html_content: The HTML content generated by the LLM.
            asset_map: A dictionary mapping original asset URLs to new local paths.

        Returns:
            The modified HTML content with rewritten asset paths.
        """
        if not asset_map:
            logger.info("No assets to rewrite, returning original HTML.")
            return html_content

        logger.info(f"Rewriting {len(asset_map)} asset paths in generated HTML.")
        soup = BeautifulSoup(html_content, 'lxml')

        # Rewrite 'src' attributes for tags like <img>, <source>, <video>
        tags_with_src = soup.find_all(src=True)
        for tag in tags_with_src:
            original_src = tag.get('src')
            if original_src and original_src in asset_map:
                new_src = asset_map[original_src]
                logger.debug(f"Rewriting src: {original_src} -> {new_src}")
                tag['src'] = new_src
        
        # Rewrite 'href' for stylesheets (if you choose to download them later)
        # tags_with_href = soup.find_all('link', rel='stylesheet', href=True)
        # for tag in tags_with_href:
        #    ...

        # Rewrite url(...) in inline styles
        tags_with_style = soup.find_all(style=True)
        for tag in tags_with_style:
            style_str = tag['style']
            # Use a regex to find all url(...) occurrences
            new_style = re.sub(
                r'url\s*\(([^)]+)\)',
                lambda match: self._replace_url_in_style(match, asset_map),
                style_str
            )
            tag['style'] = new_style
            
        # Rewrite url(...) in <style> blocks
        style_blocks = soup.find_all('style')
        for block in style_blocks:
            new_css = re.sub(
                r'url\s*\(([^)]+)\)',
                lambda match: self._replace_url_in_style(match, asset_map),
                block.string or ''
            )
            block.string = new_css

        return str(soup)

    def _replace_url_in_style(self, match: re.Match, asset_map: Dict[str, str]) -> str:
        """Helper function for regex replacement of url() paths."""
        original_url = match.group(1).strip('\'"')
        if original_url in asset_map:
            new_url = asset_map[original_url]
            logger.debug(f"Rewriting CSS url(): {original_url} -> {new_url}")
            return f"url('{new_url}')"
        # If the URL is not in our map, return the original match
        return match.group(0)